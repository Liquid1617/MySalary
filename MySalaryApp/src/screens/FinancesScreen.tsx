import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  SafeAreaView,
  Switch,
  TouchableOpacity,
  ScrollView,
  Alert,
} from 'react-native';
import { homeScreenStyles, layoutStyles, typographyStyles } from '../styles';
import { biometricService, BiometricCapability } from '../services/biometric';

export const FinancesScreen: React.FC = () => {
  const [biometricCapability, setBiometricCapability] =
    useState<BiometricCapability | null>(null);
  const [biometricEnabled, setBiometricEnabled] = useState(false);

  useEffect(() => {
    initializeBiometric();
  }, []);

  const initializeBiometric = async () => {
    try {
      const capability = await biometricService.checkBiometricCapability();
      setBiometricCapability(capability);

      if (capability.available) {
        const isEnabled = await biometricService.isBiometricEnabled();
        setBiometricEnabled(isEnabled);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏:', error);
    }
  };

  const handleBiometricToggle = async (value: boolean) => {
    try {
      if (value) {
        const authResult = await biometricService.authenticateWithBiometrics(
          '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        );

        if (authResult.success) {
          await biometricService.setBiometricEnabled(true);
          setBiometricEnabled(true);
          Alert.alert(
            '–£—Å–ø–µ—Ö',
            `${biometricService.getBiometryDisplayName(
              biometricCapability?.biometryType || null,
            )} —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`,
          );
        } else {
          Alert.alert(
            '–û—à–∏–±–∫–∞',
            authResult.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∏–æ–º–µ—Ç—Ä–∏—é',
          );
        }
      } else {
        await biometricService.setBiometricEnabled(false);
        setBiometricEnabled(false);
        Alert.alert('–ë–∏–æ–º–µ—Ç—Ä–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞', '–í—Ö–æ–¥ –ø–æ –±–∏–æ–º–µ—Ç—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏');
    }
  };

  return (
    <SafeAreaView style={homeScreenStyles.container}>
      <ScrollView style={homeScreenStyles.content}>
        <View style={homeScreenStyles.header}>
          <Text style={[typographyStyles.h1, homeScreenStyles.welcomeTitle]}>
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MySalary! üí∞
          </Text>
          <Text style={[typographyStyles.body1, homeScreenStyles.subtitle]}>
            –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –ª–µ–≥–∫–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ
          </Text>
        </View>

        <View style={homeScreenStyles.mainContent}>
          <View style={homeScreenStyles.featureCard}>
            <Text style={homeScreenStyles.featureEmoji}>üì•</Text>
            <Text style={homeScreenStyles.featureTitle}>–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥</Text>
            <Text style={homeScreenStyles.featureDescription}>
              –ó–∞—Ä–ø–ª–∞—Ç–∞, –ø—Ä–µ–º–∏–∏, –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏
            </Text>
          </View>

          <View style={homeScreenStyles.featureCard}>
            <Text style={homeScreenStyles.featureEmoji}>üì§</Text>
            <Text style={homeScreenStyles.featureTitle}>–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥</Text>
            <Text style={homeScreenStyles.featureDescription}>
              –ü–æ–∫—É–ø–∫–∏, —Å—á–µ—Ç–∞, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
            </Text>
          </View>

          <View style={homeScreenStyles.featureCard}>
            <Text style={homeScreenStyles.featureEmoji}>üí≥</Text>
            <Text style={homeScreenStyles.featureTitle}>
              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞–º–∏
            </Text>
            <Text style={homeScreenStyles.featureDescription}>
              –ö–∞—Ä—Ç—ã, –Ω–∞–ª–∏—á–Ω—ã–µ, –¥–µ–ø–æ–∑–∏—Ç—ã
            </Text>
          </View>
        </View>

        <View style={homeScreenStyles.footer}>
          <Text style={homeScreenStyles.comingSoonText}>
            –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...
          </Text>

          {biometricCapability?.available && (
            <View style={homeScreenStyles.biometricContainer}>
              <TouchableOpacity
                style={homeScreenStyles.biometricRow}
                onPress={() => handleBiometricToggle(!biometricEnabled)}>
                <View style={homeScreenStyles.biometricInfo}>
                  <Text style={homeScreenStyles.biometricTitle}>
                    –í—Ö–æ–¥ –ø–æ{' '}
                    {biometricService.getBiometryDisplayName(
                      biometricCapability.biometryType,
                    )}
                  </Text>
                  <Text style={homeScreenStyles.biometricDescription}>
                    –ë—ã—Å—Ç—Ä–∞—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                  </Text>
                </View>
                <Switch
                  value={biometricEnabled}
                  onValueChange={handleBiometricToggle}
                  trackColor={{ false: '#E5E5EA', true: '#34C759' }}
                  thumbColor={biometricEnabled ? '#FFFFFF' : '#FFFFFF'}
                  ios_backgroundColor="#E5E5EA"
                />
              </TouchableOpacity>
            </View>
          )}
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};
