'use strict';

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface, Sequelize) {
    const now = new Date();
    const threeMonthsAgo = new Date();
    threeMonthsAgo.setMonth(now.getMonth() - 3);

    // 1. –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ 3 –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥)
    const [demoUser] = await queryInterface.bulkInsert('Users', [{
      name: '–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      login: 'demo_user',
      email: 'demo@example.com',
      phone: '+7 (900) 123-45-67',
      password: '$2b$10$LQv3c1yqBfVFaogkjPVtEOPP4RFZKDqY5xOoQY5oQoQY5oQY5oQY5', // demo123
      primary_currency_id: 1, // RUB
      country_id: 1, // Russia
      created_at: threeMonthsAgo,
      updated_at: now,
    }], { returning: true });

    const userId = demoUser.id;

    // 2. –°–æ–∑–¥–∞–µ–º 5 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Ä–∞–∑–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å –¥–µ–Ω—å–≥–∞–º–∏
    const accounts = await queryInterface.bulkInsert('Accounts', [
      {
        user_id: userId,
        account_type: 'cash',
        account_name: '–ù–∞–ª–∏—á–Ω—ã–µ',
        currency_id: 1, // RUB
        balance: 25000.00,
        is_active: true,
        description: '–ö–æ—à–µ–ª–µ–∫ —Å –Ω–∞–ª–∏—á–Ω—ã–º–∏',
        created_at: threeMonthsAgo,
        updated_at: now,
      },
      {
        user_id: userId,
        account_type: 'debit_card',
        account_name: '–î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –°–±–µ—Ä–±–∞–Ω–∫',
        currency_id: 1, // RUB
        balance: 150000.00,
        is_active: true,
        description: '–û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞',
        created_at: threeMonthsAgo,
        updated_at: now,
      },
      {
        user_id: userId,
        account_type: 'credit_card',
        account_name: '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ',
        currency_id: 1, // RUB
        balance: -35000.00,
        is_active: true,
        description: '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –¥–æ–ª–≥–æ–º',
        created_at: threeMonthsAgo,
        updated_at: now,
      },
      {
        user_id: userId,
        account_type: 'bank_account',
        account_name: '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç',
        currency_id: 1, // RUB
        balance: 500000.00,
        is_active: true,
        description: '–°–±–µ—Ä–µ–∂–µ–Ω–∏—è –ø–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç',
        created_at: threeMonthsAgo,
        updated_at: now,
      },
      {
        user_id: userId,
        account_type: 'digital_wallet',
        account_name: '–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏',
        currency_id: 1, // RUB
        balance: 8500.00,
        is_active: true,
        description: '–¶–∏—Ñ—Ä–æ–≤–æ–π –∫–æ—à–µ–ª–µ–∫',
        created_at: threeMonthsAgo,
        updated_at: now,
      }
    ], { returning: true });

    // 3. –°–æ–∑–¥–∞–µ–º 100+ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞
    const transactions = [];
    const categories = await queryInterface.sequelize.query('SELECT * FROM "Categories" LIMIT 20', { type: Sequelize.QueryTypes.SELECT });
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π –¥–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    const randomDate = (start, end) => {
      return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
    };

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (100 —à—Ç—É–∫)
    for (let i = 0; i < 100; i++) {
      const randomAccount = accounts[Math.floor(Math.random() * accounts.length)];
      const randomCategory = categories[Math.floor(Math.random() * categories.length)];
      const isExpense = Math.random() > 0.3; // 70% —Ä–∞—Å—Ö–æ–¥–æ–≤, 30% –¥–æ—Ö–æ–¥–æ–≤
      const transactionDate = randomDate(threeMonthsAgo, now);
      
      let amount, transactionType;
      if (isExpense) {
        amount = -(Math.random() * 15000 + 100); // –†–∞—Å—Ö–æ–¥—ã –æ—Ç 100 –¥–æ 15100
        transactionType = 'expense';
      } else {
        amount = Math.random() * 50000 + 1000; // –î–æ—Ö–æ–¥—ã –æ—Ç 1000 –¥–æ 51000
        transactionType = 'income';
      }

      transactions.push({
        user_id: userId,
        account_id: randomAccount.id,
        category_id: randomCategory.id,
        amount: Math.round(amount * 100) / 100, // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –∫–æ–ø–µ–µ–∫
        transaction_type: transactionType,
        description: isExpense 
          ? `–ü–æ–∫—É–ø–∫–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${randomCategory.category_name}` 
          : `–î–æ—Ö–æ–¥: ${randomCategory.category_name}`,
        transaction_date: transactionDate,
        status: 'posted',
        confirmed_at: transactionDate,
        created_at: transactionDate,
        updated_at: transactionDate,
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –±—É–¥—É—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
    const futureDate1 = new Date();
    futureDate1.setDate(futureDate1.getDate() + 7); // –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é

    const futureDate2 = new Date();
    futureDate2.setDate(futureDate2.getDate() + 15); // –ß–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏

    const futureDate3 = new Date();
    futureDate3.setMonth(futureDate3.getMonth() + 1); // –ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü

    transactions.push(
      {
        user_id: userId,
        account_id: accounts[1].id, // –î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞
        category_id: categories.find(c => c.category_name === '–ó–∞—Ä–ø–ª–∞—Ç–∞')?.id || categories[0].id,
        amount: 85000.00,
        transaction_type: 'income',
        description: '–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü',
        transaction_date: futureDate1,
        status: 'scheduled',
        created_at: now,
        updated_at: now,
      },
      {
        user_id: userId,
        account_id: accounts[0].id, // –ù–∞–ª–∏—á–Ω—ã–µ
        category_id: categories.find(c => c.category_name === '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏')?.id || categories[1].id,
        amount: -8500.00,
        transaction_type: 'expense',
        description: '–û–ø–ª–∞—Ç–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥',
        transaction_date: futureDate2,
        status: 'scheduled',
        created_at: now,
        updated_at: now,
      },
      {
        user_id: userId,
        account_id: accounts[2].id, // –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞
        category_id: categories.find(c => c.category_name === '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è')?.id || categories[2].id,
        amount: -25000.00,
        transaction_type: 'expense',
        description: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–ø—É—Å–∫',
        transaction_date: futureDate3,
        status: 'scheduled',
        created_at: now,
        updated_at: now,
      }
    );

    await queryInterface.bulkInsert('Transactions', transactions);

    // 4. –°–æ–∑–¥–∞–µ–º –±—é–¥–∂–µ—Ç—ã (—á–∞—Å—Ç–∏—á–Ω–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ)
    const budgets = await queryInterface.bulkInsert('Budgets', [
      {
        user_id: userId,
        name: '–ë—é–¥–∂–µ—Ç –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã',
        limit_amount: 30000.00,
        currency: 'RUB',
        period_type: 'month',
        rollover: false,
        is_active: true,
        created_at: now,
        updated_at: now,
      },
      {
        user_id: userId,
        name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –¥–æ—Å—É–≥',
        limit_amount: 15000.00,
        currency: 'RUB',
        period_type: 'month',
        rollover: true,
        is_active: true,
        created_at: now,
        updated_at: now,
      },
      {
        user_id: userId,
        name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
        limit_amount: 8000.00,
        currency: 'RUB',
        period_type: 'week',
        rollover: false,
        is_active: true,
        created_at: now,
        updated_at: now,
      }
    ], { returning: true });

    // 5. –°–≤—è–∑—ã–≤–∞–µ–º –±—é–¥–∂–µ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    const budgetCategories = [];
    
    // –ë—é–¥–∂–µ—Ç –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã
    const foodCategory = categories.find(c => c.category_name === '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è');
    if (foodCategory && budgets[0]) {
      budgetCategories.push({
        budget_id: budgets[0].id,
        category_id: foodCategory.id,
        created_at: now,
        updated_at: now,
      });
    }

    // –ë—é–¥–∂–µ—Ç –Ω–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
    const entertainmentCategory = categories.find(c => c.category_name === '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è');
    if (entertainmentCategory && budgets[1]) {
      budgetCategories.push({
        budget_id: budgets[1].id,
        category_id: entertainmentCategory.id,
        created_at: now,
        updated_at: now,
      });
    }

    // –ë—é–¥–∂–µ—Ç –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    const transportCategory = categories.find(c => c.category_name === '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç');
    if (transportCategory && budgets[2]) {
      budgetCategories.push({
        budget_id: budgets[2].id,
        category_id: transportCategory.id,
        created_at: now,
        updated_at: now,
      });
    }

    await queryInterface.bulkInsert('BudgetCategories', budgetCategories);

    console.log('‚úÖ –î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${userId}`);
    console.log(`üí≥ –°–æ–∑–¥–∞–Ω–æ ${accounts.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤`);
    console.log(`üí∏ –°–æ–∑–¥–∞–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ ${budgets.length} –±—é–¥–∂–µ—Ç–æ–≤`);
  },

  async down(queryInterface, Sequelize) {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const demoUser = await queryInterface.sequelize.query(
      'SELECT id FROM "Users" WHERE login = ? LIMIT 1',
      {
        replacements: ['demo_user'],
        type: Sequelize.QueryTypes.SELECT
      }
    );

    if (demoUser.length > 0) {
      const userId = demoUser[0].id;
      
      // –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–∏–∑-–∑–∞ foreign keys)
      await queryInterface.bulkDelete('BudgetCategories', {
        budget_id: {
          [Sequelize.Op.in]: queryInterface.sequelize.literal(
            `(SELECT id FROM "Budgets" WHERE user_id = ${userId})`
          )
        }
      });
      
      await queryInterface.bulkDelete('Transactions', { user_id: userId });
      await queryInterface.bulkDelete('Budgets', { user_id: userId });
      await queryInterface.bulkDelete('Accounts', { user_id: userId });
      await queryInterface.bulkDelete('Users', { id: userId });
      
      console.log('‚úÖ –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
    }
  }
};