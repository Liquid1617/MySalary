'use strict';

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface, Sequelize) {
    const now = new Date();
    const threeMonthsAgo = new Date();
    threeMonthsAgo.setMonth(now.getMonth() - 3);

    // 1. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id=8
    const userId = 8;
    console.log(`üîÑ –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${userId}`);

    // 2. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let accounts = await queryInterface.sequelize.query(
      'SELECT * FROM "Accounts" WHERE user_id = :userId',
      {
        replacements: { userId },
        type: Sequelize.QueryTypes.SELECT
      }
    );

    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º –∏—Ö
    if (accounts.length === 0) {
      console.log('üè¶ –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      accounts = await queryInterface.bulkInsert('Accounts', [
      {
        user_id: userId,
        account_type: 'cash',
        account_name: '–ù–∞–ª–∏—á–Ω—ã–µ',
        currency_id: 1, // RUB
        balance: 25000.00,
        is_active: true,
        description: '–ö–æ—à–µ–ª–µ–∫ —Å –Ω–∞–ª–∏—á–Ω—ã–º–∏',
        createdAt: threeMonthsAgo,
        updatedAt: now,
      },
      {
        user_id: userId,
        account_type: 'debit_card',
        account_name: '–î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –°–±–µ—Ä–±–∞–Ω–∫',
        currency_id: 1, // RUB
        balance: 150000.00,
        is_active: true,
        description: '–û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞',
        createdAt: threeMonthsAgo,
        updatedAt: now,
      },
      {
        user_id: userId,
        account_type: 'credit_card',
        account_name: '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ',
        currency_id: 1, // RUB
        balance: -35000.00,
        is_active: true,
        description: '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –¥–æ–ª–≥–æ–º',
        createdAt: threeMonthsAgo,
        updatedAt: now,
      },
      {
        user_id: userId,
        account_type: 'bank_account',
        account_name: '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç',
        currency_id: 1, // RUB
        balance: 500000.00,
        is_active: true,
        description: '–°–±–µ—Ä–µ–∂–µ–Ω–∏—è –ø–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç',
        createdAt: threeMonthsAgo,
        updatedAt: now,
      },
      {
        user_id: userId,
        account_type: 'digital_wallet',
        account_name: '–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏',
        currency_id: 1, // RUB
        balance: 8500.00,
        is_active: true,
        description: '–¶–∏—Ñ—Ä–æ–≤–æ–π –∫–æ—à–µ–ª–µ–∫',
        createdAt: threeMonthsAgo,
        updatedAt: now,
      }
    ], { returning: true });
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${accounts.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤`);
    }

    // 3. –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const categories = await queryInterface.sequelize.query('SELECT * FROM "Categories"', { type: Sequelize.QueryTypes.SELECT });
    const expenseCategories = categories.filter(c => c.category_type === 'expense');
    const incomeCategories = categories.filter(c => c.category_type === 'income');
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π –¥–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    const randomDate = (start, end) => {
      return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const expenseAmountRanges = {
      '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è': { min: 300, max: 5000 },
      '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': { min: 50, max: 1500 },
      '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏': { min: 3000, max: 15000 },
      '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': { min: 500, max: 8000 },
      '–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å': { min: 1000, max: 20000 },
      '–ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ': { min: 500, max: 10000 },
      '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': { min: 2000, max: 30000 },
      '–î–æ–º –∏ –±—ã—Ç': { min: 200, max: 5000 },
      '–ö—Ä–µ–¥–∏—Ç—ã –∏ –∑–∞–π–º—ã': { min: 5000, max: 50000 },
      '–°–ø–æ—Ä—Ç –∏ —Ñ–∏—Ç–Ω–µ—Å': { min: 1500, max: 5000 },
      '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': { min: 10000, max: 100000 },
      '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ': { min: 800, max: 5000 },
      '–ë–µ–Ω–∑–∏–Ω –∏ –ø–∞—Ä–∫–æ–≤–∫–∞': { min: 500, max: 5000 },
      '–ö—Ä–∞—Å–æ—Ç–∞ –∏ —É—Ö–æ–¥': { min: 1000, max: 8000 },
      '–ü–æ–¥–∞—Ä–∫–∏': { min: 500, max: 10000 },
      '–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã': { min: 100, max: 5000 }
    };

    const incomeAmountRanges = {
      '–ó–∞—Ä–ø–ª–∞—Ç–∞': { min: 50000, max: 150000 },
      '–ü—Ä–µ–º–∏–∏ –∏ –±–æ–Ω—É—Å—ã': { min: 10000, max: 50000 },
      '–§—Ä–∏–ª–∞–Ω—Å –∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞': { min: 5000, max: 40000 },
      '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –¥–∏–≤–∏–¥–µ–Ω–¥—ã': { min: 1000, max: 30000 },
      '–ü—Ä–æ–¥–∞–∂–∏ –∏ —Ç–æ—Ä–≥–æ–≤–ª—è': { min: 1000, max: 50000 },
      '–ê—Ä–µ–Ω–¥–∞ –∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å': { min: 20000, max: 80000 },
      '–ü–µ–Ω—Å–∏—è –∏ –ø–æ—Å–æ–±–∏—è': { min: 10000, max: 30000 },
      '–°—Ç–∏–ø–µ–Ω–¥–∏—è': { min: 2000, max: 10000 },
      '–ü–æ–¥–∞—Ä–∫–∏ –∏ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ': { min: 1000, max: 100000 },
      '–í–æ–∑–≤—Ä–∞—Ç –Ω–∞–ª–æ–≥–æ–≤': { min: 5000, max: 50000 },
      '–ö—ç—à–±—ç–∫ –∏ –±–æ–Ω—É—Å—ã': { min: 100, max: 5000 },
      '–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã': { min: 500, max: 20000 }
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const expenseDescriptions = {
      '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è': ['–ü—è—Ç–µ—Ä–æ—á–∫–∞', '–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫', '–ê—à–∞–Ω', '–ú–∞–≥–Ω–∏—Ç', '–í–∫—É—Å–≤–∏–ª–ª', 'Metro Cash & Carry', '–õ–µ–Ω—Ç–∞', '–î–∏–∫—Å–∏'],
      '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': ['–Ø–Ω–¥–µ–∫—Å.–¢–∞–∫—Å–∏', 'Uber', '–ú–µ—Ç—Ä–æ', '–ê–≤—Ç–æ–±—É—Å', '–≠–ª–µ–∫—Ç—Ä–∏—á–∫–∞', '–ö–∞—Ä—à–µ—Ä–∏–Ω–≥ –î–µ–ª–∏–º–æ–±–∏–ª—å', '–°–∏—Ç–∏–¥—Ä–∞–π–≤', '–ë–µ–ª–∫–∞–ö–∞—Ä'],
      '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏': ['–ö–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞', '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', '–ì–∞–∑', '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –†–æ—Å—Ç–µ–ª–µ–∫–æ–º', '–ú–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å –ú–¢–°', '–î–æ–º–æ—Ñ–æ–Ω', '–í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ'],
      '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': ['–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä –ö–ê–†–û', '–ö–æ–Ω—Ü–µ—Ä—Ç', '–¢–µ–∞—Ç—Ä', '–ë–æ—É–ª–∏–Ω–≥', '–ö–≤–µ—Å—Ç', '–ü–∞—Ä–∫ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤', '–ê–∫–≤–∞–ø–∞—Ä–∫', '–ó–æ–æ–ø–∞—Ä–∫'],
      '–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å': ['H&M', 'Zara', 'Uniqlo', '–°–ø–æ—Ä—Ç–º–∞—Å—Ç–µ—Ä', '–î–µ–∫–∞—Ç–ª–æ–Ω', 'Reserved', 'Mango', '–ú–∞—Å—Å–∏–º–æ –î—É—Ç—Ç–∏'],
      '–ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ': ['–ê–ø—Ç–µ–∫–∞ –†–∏–≥–ª–∞', '–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞', '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è', '–ê–Ω–∞–ª–∏–∑—ã –ò–Ω–≤–∏—Ç—Ä–æ', '–ú–∞—Å—Å–∞–∂', '–ú–†–¢', '–£–ó–ò', '–í–∏—Ç–∞–º–∏–Ω—ã'],
      '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': ['–ö—É—Ä—Å—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ', '–û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å Skillbox', '–£—á–µ–±–Ω–∏–∫–∏', '–†–µ–ø–µ—Ç–∏—Ç–æ—Ä', '–ê–≤—Ç–æ—à–∫–æ–ª–∞', '–°–µ–º–∏–Ω–∞—Ä', '–í–µ–±–∏–Ω–∞—Ä', '–ü–æ–¥–ø–∏—Å–∫–∞ Coursera'],
      '–î–æ–º –∏ –±—ã—Ç': ['IKEA', '–õ–µ—Ä—É–∞ –ú–µ—Ä–ª–µ–Ω', 'OBI', '–•–æ–∑—Ç–æ–≤–∞—Ä—ã', '–ü–æ—Å—É–¥–∞', '–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è', '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞', '–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏'],
      '–ö—Ä–µ–¥–∏—Ç—ã –∏ –∑–∞–π–º—ã': ['–ò–ø–æ—Ç–µ–∫–∞ –°–±–µ—Ä–±–∞–Ω–∫', '–ö—Ä–µ–¥–∏—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ', '–ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã', '–ó–∞–π–º –¥—Ä—É–≥—É', '–ê–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç', '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç'],
      '–°–ø–æ—Ä—Ç –∏ —Ñ–∏—Ç–Ω–µ—Å': ['–§–∏—Ç–Ω–µ—Å-–∫–ª—É–± WorldClass', '–ë–∞—Å—Å–µ–π–Ω', '–ô–æ–≥–∞', '–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª', '–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ', '–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞', '–¢–µ–Ω–Ω–∏—Å'],
      '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': ['–ê–≤–∏–∞–±–∏–ª–µ—Ç—ã –ê—ç—Ä–æ—Ñ–ª–æ—Ç', '–û—Ç–µ–ª—å Booking', 'Airbnb', '–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞', '–≠–∫—Å–∫—É—Ä—Å–∏–∏', '–í–∏–∑–∞', '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä'],
      '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ': ['–®–æ–∫–æ–ª–∞–¥–Ω–∏—Ü–∞', 'Starbucks', 'KFC', '–¢–µ—Ä–µ–º–æ–∫', '–í–∫—É—Å–Ω–æ –∏ —Ç–æ—á–∫–∞', '–î–æ–¥–æ –ü–∏—Ü—Ü–∞', '–¢–∞–Ω—É–∫–∏', '–Ø–∫–∏—Ç–æ—Ä–∏—è'],
      '–ë–µ–Ω–∑–∏–Ω –∏ –ø–∞—Ä–∫–æ–≤–∫–∞': ['–õ—É–∫–æ–π–ª', '–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å', 'Shell', 'BP', '–ü–∞—Ä–∫–æ–≤–∫–∞ —Ü–µ–Ω—Ç—Ä', '–ü–ª–∞—Ç–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞', '–ú–æ–π–∫–∞ –∞–≤—Ç–æ', '–¢–µ—Ö–æ—Å–º–æ—Ç—Ä'],
      '–ö—Ä–∞—Å–æ—Ç–∞ –∏ —É—Ö–æ–¥': ['–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è', '–ú–∞–Ω–∏–∫—é—Ä', '–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥', '–°–ü–ê', '–°–æ–ª—è—Ä–∏–π', '–ë–∞—Ä–±–µ—Ä—à–æ–ø', '–ö–æ—Å–º–µ—Ç–∏–∫–∞', '–ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è'],
      '–ü–æ–¥–∞—Ä–∫–∏': ['–ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–°–≤–∞–¥–µ–±–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫', '–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –ø–æ–¥–∞—Ä–æ–∫', '–¶–≤–µ—Ç—ã', '–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', '–°—É–≤–µ–Ω–∏—Ä—ã'],
      '–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã': ['–ù–æ—Ç–∞—Ä–∏—É—Å', '–ì–æ—Å–ø–æ—à–ª–∏–Ω–∞', '–®—Ç—Ä–∞—Ñ', '–ö–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞', '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞', '–ü–æ–¥–ø–∏—Å–∫–∞', '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å']
    };

    const incomeDescriptions = {
      '–ó–∞—Ä–ø–ª–∞—Ç–∞': ['–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü', '–ê–≤–∞–Ω—Å', '–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞', '–ó–∞—Ä–ø–ª–∞—Ç–∞ —Å –ø—Ä–µ–º–∏–µ–π'],
      '–ü—Ä–µ–º–∏–∏ –∏ –±–æ–Ω—É—Å—ã': ['–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –ø—Ä–µ–º–∏—è', '–ì–æ–¥–æ–≤–æ–π –±–æ–Ω—É—Å', '13-—è –∑–∞—Ä–ø–ª–∞—Ç–∞', '–ü—Ä–µ–º–∏—è –∑–∞ –ø—Ä–æ–µ–∫—Ç', '–ë–æ–Ω—É—Å –∑–∞ KPI'],
      '–§—Ä–∏–ª–∞–Ω—Å –∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞': ['–ü—Ä–æ–µ–∫—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞', '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–∞', '–î–∏–∑–∞–π–Ω –ª–æ–≥–æ—Ç–∏–ø–∞', '–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç–µ–π', '–ü–µ—Ä–µ–≤–æ–¥—ã'],
      '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –¥–∏–≤–∏–¥–µ–Ω–¥—ã': ['–î–∏–≤–∏–¥–µ–Ω–¥—ã –°–±–µ—Ä–±–∞–Ω–∫', '–î–æ—Ö–æ–¥ –æ—Ç –∞–∫—Ü–∏–π', '–ü—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –≤–∫–ª–∞–¥—É', '–ö—É–ø–æ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥', '–ü—Ä–æ–¥–∞–∂–∞ –∞–∫—Ü–∏–π'],
      '–ü—Ä–æ–¥–∞–∂–∏ –∏ —Ç–æ—Ä–≥–æ–≤–ª—è': ['–ü—Ä–æ–¥–∞–∂–∞ –Ω–∞ –ê–≤–∏—Ç–æ', '–ü—Ä–æ–¥–∞–∂–∞ —Å—Ç–∞—Ä–æ–π —Ç–µ—Ö–Ω–∏–∫–∏', '–ü—Ä–æ–¥–∞–∂–∞ –æ–¥–µ–∂–¥—ã', 'Handmade –∏–∑–¥–µ–ª–∏—è', '–ü—Ä–æ–¥–∞–∂–∞ –∞–≤—Ç–æ'],
      '–ê—Ä–µ–Ω–¥–∞ –∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å': ['–ê—Ä–µ–Ω–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã', '–°–¥–∞—á–∞ –∫–æ–º–Ω–∞—Ç—ã', '–ê—Ä–µ–Ω–¥–∞ –≥–∞—Ä–∞–∂–∞', '–°–¥–∞—á–∞ –¥–∞—á–∏', '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å'],
      '–ü–µ–Ω—Å–∏—è –∏ –ø–æ—Å–æ–±–∏—è': ['–ü–µ–Ω—Å–∏—è', '–ü–æ—Å–æ–±–∏–µ –ø–æ –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–µ', '–î–µ—Ç—Å–∫–æ–µ –ø–æ—Å–æ–±–∏–µ', '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞', '–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–π –∫–∞–ø–∏—Ç–∞–ª'],
      '–°—Ç–∏–ø–µ–Ω–¥–∏—è': ['–°—Ç–∏–ø–µ–Ω–¥–∏—è –∑–∞ —É—á–µ–±—É', '–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è', '–°—Ç–∏–ø–µ–Ω–¥–∏—è –∑–∞ –Ω–∞—É—á–Ω—É—é —Ä–∞–±–æ—Ç—É', '–ì—Ä–∞–Ω—Ç'],
      '–ü–æ–¥–∞—Ä–∫–∏ –∏ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ': ['–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π', '–î–µ–Ω–µ–∂–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ —Å–≤–∞–¥—å–±—É', '–ù–∞—Å–ª–µ–¥—Å—Ç–≤–æ', '–ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è'],
      '–í–æ–∑–≤—Ä–∞—Ç –Ω–∞–ª–æ–≥–æ–≤': ['–ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç –∑–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É', '–í—ã—á–µ—Ç –∑–∞ –æ–±—É—á–µ–Ω–∏–µ', '–í—ã—á–µ—Ç –∑–∞ –ª–µ—á–µ–Ω–∏–µ', '–í–æ–∑–≤—Ä–∞—Ç –ù–î–°', '3-–ù–î–§–õ'],
      '–ö—ç—à–±—ç–∫ –∏ –±–æ–Ω—É—Å—ã': ['–ö—ç—à–±—ç–∫ –¢–∏–Ω—å–∫–æ—Ñ—Ñ', '–ë–æ–Ω—É—Å—ã –°–ø–∞—Å–∏–±–æ', '–ö—ç—à–±—ç–∫ –∑–∞ –ø–æ–∫—É–ø–∫–∏', '–ú–∏–ª–∏ –ê—ç—Ä–æ—Ñ–ª–æ—Ç', '–ë–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏'],
      '–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã': ['–í—ã–∏–≥—Ä—ã—à –≤ –ª–æ—Ç–µ—Ä–µ—é', '–ù–∞—Ö–æ–¥–∫–∞', '–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è', '–í–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–≥–∞', '–°—Ç—Ä–∞—Ö–æ–≤–∞—è –≤—ã–ø–ª–∞—Ç–∞']
    };

    // 4. –°–æ–∑–¥–∞–µ–º 200 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞ —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const transactions = [];
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    for (const category of expenseCategories) {
      const range = expenseAmountRanges[category.category_name] || { min: 100, max: 5000 };
      const descriptions = expenseDescriptions[category.category_name] || ['–†–∞—Å—Ö–æ–¥'];
      
      // 5-8 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      const transactionCount = Math.floor(Math.random() * 4) + 5;
      
      for (let i = 0; i < transactionCount; i++) {
        const randomAccount = accounts[Math.floor(Math.random() * accounts.length)];
        const transactionDate = randomDate(threeMonthsAgo, now);
        const amount = Math.random() * (range.max - range.min) + range.min;
        const description = descriptions[Math.floor(Math.random() * descriptions.length)];
        
        transactions.push({
          user_id: userId,
          account_id: randomAccount.id,
          category_id: category.id,
          amount: Math.round(amount * 100) / 100,
          transaction_type: 'expense',
          description: description,
          transaction_date: transactionDate.toISOString().split('T')[0],
          status: 'posted',
          confirmed_at: transactionDate,
          createdAt: transactionDate,
          updatedAt: transactionDate,
        });
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
    for (const category of incomeCategories) {
      const range = incomeAmountRanges[category.category_name] || { min: 1000, max: 20000 };
      const descriptions = incomeDescriptions[category.category_name] || ['–î–æ—Ö–æ–¥'];
      
      // 2-4 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–¥–æ—Ö–æ–¥–æ–≤ –æ–±—ã—á–Ω–æ –º–µ–Ω—å—à–µ)
      const transactionCount = Math.floor(Math.random() * 3) + 2;
      
      for (let i = 0; i < transactionCount; i++) {
        const randomAccount = accounts[Math.floor(Math.random() * accounts.length)];
        const transactionDate = randomDate(threeMonthsAgo, now);
        const amount = Math.random() * (range.max - range.min) + range.min;
        const description = descriptions[Math.floor(Math.random() * descriptions.length)];
        
        transactions.push({
          user_id: userId,
          account_id: randomAccount.id,
          category_id: category.id,
          amount: Math.round(amount * 100) / 100,
          transaction_type: 'income',
          description: description,
          transaction_date: transactionDate.toISOString().split('T')[0],
          status: 'posted',
          confirmed_at: transactionDate,
          createdAt: transactionDate,
          updatedAt: transactionDate,
        });
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –±—É–¥—É—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
    const futureDate1 = new Date();
    futureDate1.setDate(futureDate1.getDate() + 7); // –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é

    const futureDate2 = new Date();
    futureDate2.setDate(futureDate2.getDate() + 15); // –ß–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏

    const futureDate3 = new Date();
    futureDate3.setMonth(futureDate3.getMonth() + 1); // –ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü

    const incomeCategory = categories.find(c => c.category_type === 'income');
    const expenseCategory = categories.find(c => c.category_type === 'expense');

    transactions.push(
      {
        user_id: userId,
        account_id: accounts[1].id, // –î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞
        category_id: incomeCategory?.id || categories[0].id,
        amount: 85000.00,
        transaction_type: 'income',
        description: '–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü',
        transaction_date: futureDate1.toISOString().split('T')[0],
        status: 'scheduled',
        createdAt: now,
        updatedAt: now,
      },
      {
        user_id: userId,
        account_id: accounts[0].id, // –ù–∞–ª–∏—á–Ω—ã–µ
        category_id: expenseCategory?.id || categories[1].id,
        amount: 8500.00,
        transaction_type: 'expense',
        description: '–û–ø–ª–∞—Ç–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥',
        transaction_date: futureDate2.toISOString().split('T')[0],
        status: 'scheduled',
        createdAt: now,
        updatedAt: now,
      },
      {
        user_id: userId,
        account_id: accounts[2].id, // –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞
        category_id: expenseCategory?.id || categories[2].id,
        amount: 25000.00,
        transaction_type: 'expense',
        description: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–ø—É—Å–∫',
        transaction_date: futureDate3.toISOString().split('T')[0],
        status: 'scheduled',
        createdAt: now,
        updatedAt: now,
      }
    );

    await queryInterface.bulkInsert('Transactions', transactions);

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±—é–¥–∂–µ—Ç—ã –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    const existingBudgets = await queryInterface.sequelize.query(
      'SELECT * FROM "Budgets" WHERE user_id = :userId',
      {
        replacements: { userId },
        type: Sequelize.QueryTypes.SELECT
      }
    );

    let budgets = existingBudgets;
    if (existingBudgets.length === 0) {
      console.log('üí∞ –°–æ–∑–¥–∞–µ–º –±—é–¥–∂–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      budgets = await queryInterface.bulkInsert('Budgets', [
      {
        user_id: userId,
        name: '–ë—é–¥–∂–µ—Ç –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã',
        limit_amount: 30000.00,
        currency: 'RUB',
        period_type: 'month',
        rollover: false,
        is_active: true,
        created_at: now,
        updated_at: now,
      },
      {
        user_id: userId,
        name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –¥–æ—Å—É–≥',
        limit_amount: 15000.00,
        currency: 'RUB',
        period_type: 'month',
        rollover: true,
        is_active: true,
        created_at: now,
        updated_at: now,
      },
      {
        user_id: userId,
        name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
        limit_amount: 8000.00,
        currency: 'RUB',
        period_type: 'week',
        rollover: false,
        is_active: true,
        created_at: now,
        updated_at: now,
      }
    ], { returning: true });
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${existingBudgets.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±—é–¥–∂–µ—Ç–æ–≤`);
    }

    // 6. –°–≤—è–∑—ã–≤–∞–µ–º –±—é–¥–∂–µ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —á–µ—Ä–µ–∑ BudgetCategories
    const budgetCategories = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–≤—è–∑–∏ –±—é–¥–∂–µ—Ç-–∫–∞—Ç–µ–≥–æ—Ä–∏—è
    const existingBudgetCategories = await queryInterface.sequelize.query(
      'SELECT * FROM "BudgetCategories" WHERE budget_id IN (SELECT id FROM "Budgets" WHERE user_id = :userId)',
      {
        replacements: { userId },
        type: Sequelize.QueryTypes.SELECT
      }
    );

    // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
    if (existingBudgetCategories.length === 0 && budgets.length > 0 && expenseCategories.length > 0) {
      console.log('üîó –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –±—é–¥–∂–µ—Ç-–∫–∞—Ç–µ–≥–æ—Ä–∏—è...');
      // –°–≤—è–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –±—é–¥–∂–µ—Ç —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
      for (let i = 0; i < Math.min(budgets.length, expenseCategories.length); i++) {
        budgetCategories.push({
          budget_id: budgets[i].id,
          category_id: expenseCategories[i].id,
          created_at: now,
          updated_at: now,
        });
      }
      
      if (budgetCategories.length > 0) {
        await queryInterface.bulkInsert('BudgetCategories', budgetCategories);
      }
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${existingBudgetCategories.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–≤—è–∑–µ–π –±—é–¥–∂–µ—Ç-–∫–∞—Ç–µ–≥–æ—Ä–∏—è`);
    }

    console.log('\n‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${userId}`);
    console.log(`üí≥ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: ${accounts.length}`);
    console.log(`üí∏ –î–æ–±–∞–≤–ª–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    console.log(`üìä –ë—é–¥–∂–µ—Ç–æ–≤: ${budgets.length}`);
    console.log(`üîó –°–≤—è–∑–µ–π –±—é–¥–∂–µ—Ç-–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${budgetCategories.length}`);
    console.log(`üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤: ${expenseCategories.length}`);
    console.log(`üí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤: ${incomeCategories.length}`);
  },

  async down(queryInterface, Sequelize) {
    // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —ç—Ç–∏–º —Å–∏–¥–æ–º (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–∫–∫–∞—É–Ω—Ç—ã)
    const userId = 8;
    console.log(`\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${userId}`);
    
    // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –±—é–¥–∂–µ—Ç—ã)
    await queryInterface.bulkDelete('Transactions', { user_id: userId });
    
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã');
  }
};