const express = require('express');
const router = express.Router();
const { Transaction, Account, Category, Currency } = require('../db/models');
const auth = require('../middleware/auth');

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/', auth, async (req, res) => {
  try {
    console.log('üîç Fetching transactions with ORDER BY createdAt DESC');
    const transactions = await Transaction.findAll({
      where: { 
        '$account.user_id$': req.user.id 
      },
      include: [
        {
          model: Account,
          as: 'account',
          include: [
            {
              model: Currency,
              as: 'currency',
            }
          ]
        },
        {
          model: Account,
          as: 'targetAccount',
          required: false, // LEFT JOIN –¥–ª—è transfer —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
          include: [
            {
              model: Currency,
              as: 'currency',
            }
          ]
        },
        {
          model: Category,
          as: 'category',
          required: false, // LEFT JOIN —Ç–∞–∫ –∫–∞–∫ transfer –Ω–µ –∏–º–µ—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        }
      ],
      order: [['createdAt', 'DESC']], // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    });
    res.json(transactions);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
router.post('/', auth, async (req, res) => {
  try {
    const { account_id, category_id, amount, transaction_type, description, transfer_to } = req.body;
    
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
      user_id: req.user.id,
      account_id,
      category_id,
      amount,
      transaction_type,
      description,
      transfer_to
    });

    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!account_id || !amount || !transaction_type) {
      return res.status(400).json({ message: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: account_id, amount, transaction_type' });
    }

    if (!['income', 'expense', 'transfer'].includes(transaction_type)) {
      return res.status(400).json({ message: '–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å income, expense –∏–ª–∏ transfer' });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    if (transaction_type === 'transfer') {
      if (!transfer_to) {
        return res.status(400).json({ message: '–î–ª—è transfer –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å transfer_to' });
      }
      if (account_id === transfer_to) {
        return res.status(400).json({ message: '–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Ç–æ—Ç –∂–µ —Å—á—ë—Ç' });
      }
    } else {
      if (!category_id) {
        return res.status(400).json({ message: '–î–ª—è income/expense –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å category_id' });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω—ã–π —Å—á–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const account = await Account.findOne({
      where: { id: account_id, user_id: req.user.id },
      include: [{ model: Currency, as: 'currency' }]
    });

    if (!account) {
      return res.status(404).json({ message: '–ò—Å—Ö–æ–¥–Ω—ã–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    let targetAccount = null;
    if (transaction_type === 'transfer') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–æ–π —Å—á–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      targetAccount = await Account.findOne({
        where: { id: transfer_to, user_id: req.user.id },
        include: [{ model: Currency, as: 'currency' }]
      });

      if (!targetAccount) {
        return res.status(404).json({ message: '–¶–µ–ª–µ–≤–æ–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const category = await Category.findByPk(category_id);

      if (!category) {
        return res.status(404).json({ message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const transactionData = {
      user_id: req.user.id,
      account_id,
      amount: parseFloat(amount),
      transaction_type,
      description: description || '',
      transaction_date: new Date().toISOString().slice(0, 10), // YYYY-MM-DD —Ñ–æ—Ä–º–∞—Ç
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    if (transaction_type === 'transfer') {
      transactionData.transfer_to = transfer_to;
      transactionData.category_id = null;
    } else {
      transactionData.category_id = category_id;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transaction = await Transaction.create(transactionData);

    console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', transaction.id);

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
    if (transaction_type === 'transfer') {
      // –î–ª—è transfer –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±–∞ —Å—á—ë—Ç–∞
      const transferAmount = parseFloat(amount);
      
      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å—á—ë—Ç–∞
      await account.update({
        balance: parseFloat(account.balance) - transferAmount
      });

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      let targetAmount = transferAmount;
      if (account.currency.code !== targetAccount.currency.code) {
        const exchangeRateService = require('../services/exchangeRate');
        try {
          targetAmount = await exchangeRateService.convertCurrency(
            transferAmount, 
            account.currency.code, 
            targetAccount.currency.code
          );
          console.log(`–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: ${transferAmount} ${account.currency.code} = ${targetAmount} ${targetAccount.currency.code}`);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã –ø—Ä–∏ transfer:', error);
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 1:1
          targetAmount = transferAmount;
        }
      }

      // –ó–∞—á–∏—Å–ª—è–µ–º –Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Å—á—ë—Ç
      await targetAccount.update({
        balance: parseFloat(targetAccount.balance) + targetAmount
      });

      console.log(`Transfer completed: ${account.account_name} (-${transferAmount} ${account.currency.code}) -> ${targetAccount.account_name} (+${targetAmount} ${targetAccount.currency.code})`);
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ–±–Ω–æ–≤–ª—è–µ–º –æ–¥–∏–Ω —Å—á—ë—Ç
      const balanceChange = transaction_type === 'income' ? amount : -amount;
      await account.update({
        balance: parseFloat(account.balance) + parseFloat(balanceChange)
      });

      console.log('–ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', account.balance, '->', parseFloat(account.balance) + parseFloat(balanceChange));
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const includeOptions = [
      {
        model: Account,
        as: 'account',
        include: [
          {
            model: Currency,
            as: 'currency',
          }
        ]
      },
      {
        model: Category,
        as: 'category',
      }
    ];

    // –î–ª—è transfer –¥–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç
    if (transaction_type === 'transfer') {
      includeOptions.push({
        model: Account,
        as: 'targetAccount',
        include: [
          {
            model: Currency,
            as: 'currency',
          }
        ]
      });
    }

    const createdTransaction = await Transaction.findByPk(transaction.id, {
      include: includeOptions
    });

    res.status(201).json(createdTransaction);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
router.put('/:id', auth, async (req, res) => {
  try {
    const { id } = req.params;
    const { account_id, category_id, amount, transaction_type, description } = req.body;

    const transaction = await Transaction.findOne({
      where: { id },
      include: [
        {
          model: Account,
          as: 'account',
          where: { user_id: req.user.id }
        }
      ]
    });

    if (!transaction) {
      return res.status(404).json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
    const oldAmount = transaction.amount;
    const oldTransactionType = transaction.transaction_type;
    const oldAccount = transaction.account;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await transaction.update({
      account_id: account_id || transaction.account_id,
      category_id: category_id || transaction.category_id,
      amount: amount ? parseFloat(amount) : transaction.amount,
      transaction_type: transaction_type || transaction.transaction_type,
      description: description !== undefined ? description : transaction.description,
    });

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
    if (amount !== undefined || transaction_type !== undefined) {
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const oldBalanceChange = oldTransactionType === 'income' ? -oldAmount : oldAmount;
      await oldAccount.update({
        balance: parseFloat(oldAccount.balance) + parseFloat(oldBalanceChange)
      });

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const newAccount = await Account.findByPk(account_id || transaction.account_id);
      const newBalanceChange = transaction.transaction_type === 'income' ? transaction.amount : -transaction.amount;
      await newAccount.update({
        balance: parseFloat(newAccount.balance) + parseFloat(newBalanceChange)
      });
    }

    res.json(transaction);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ account_id  
router.delete('/account/:accountId/all', auth, async (req, res) => {
  try {
    const { accountId } = req.params;
    console.log('üóëÔ∏è Deleting transactions for account:', accountId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const account = await Account.findOne({
      where: { id: accountId, user_id: req.user.id }
    });
    
    if (!account) {
      return res.status(404).json({ message: '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É —Å—á–µ—Ç—É
    const transactions = await Transaction.findAll({
      where: { account_id: accountId },
      include: [
        {
          model: Account,
          as: 'account',
          where: { user_id: req.user.id }
        }
      ]
    });
    
    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏ —É–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    let totalBalanceChange = 0;
    for (const transaction of transactions) {
      const balanceChange = transaction.transaction_type === 'income' ? -transaction.amount : transaction.amount;
      totalBalanceChange += parseFloat(balanceChange);
      await transaction.destroy();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
    await account.update({
      balance: parseFloat(account.balance) + totalBalanceChange
    });
    
    res.json({ 
      message: `–£–¥–∞–ª–µ–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`,
      deletedCount: transactions.length 
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —Å—á–µ—Ç—É:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
router.delete('/:id', auth, async (req, res) => {
  try {
    const { id } = req.params;

    const transaction = await Transaction.findOne({
      where: { id },
      include: [
        {
          model: Account,
          as: 'account',
          where: { user_id: req.user.id }
        }
      ]
    });

    if (!transaction) {
      return res.status(404).json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    const balanceChange = transaction.transaction_type === 'income' ? -transaction.amount : transaction.amount;
    await transaction.account.update({
      balance: parseFloat(transaction.account.balance) + parseFloat(balanceChange)
    });

    // –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await transaction.destroy();

    res.json({ message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

module.exports = router; 