const express = require('express');
const router = express.Router();
const { Category } = require('../db/models');
const auth = require('../middleware/auth');

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
router.get('/', auth, async (req, res) => {
  try {
    const categories = await Category.findAll({
      order: [['category_name', 'ASC']],
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏
    const formattedCategories = categories.map(category => {
      let icon = 'üí∞';
      let color = category.category_type === 'income' ? '#28a745' : '#dc3545';
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const name = category.category_name.toLowerCase();
      if (name.includes('–∑–∞—Ä–ø–ª–∞—Ç–∞')) icon = 'üí∞';
      else if (name.includes('–ø—Ä–æ–¥—É–∫—Ç—ã') || name.includes('–ø–∏—Ç–∞–Ω–∏–µ')) icon = 'üõí';
      else if (name.includes('—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')) icon = 'üöó';
      else if (name.includes('–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ')) icon = 'üè†';
      else if (name.includes('—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è')) icon = 'üé¨';
      else if (name.includes('–æ–¥–µ–∂–¥–∞')) icon = 'üëï';
      else if (name.includes('–º–µ–¥–∏—Ü–∏–Ω–∞') || name.includes('–∑–¥–æ—Ä–æ–≤—å–µ')) icon = '‚öïÔ∏è';
      else if (name.includes('–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ')) icon = 'üìö';
      else if (name.includes('–¥–æ–º') || name.includes('–±—ã—Ç')) icon = 'üè†';
      else if (name.includes('–∫—Ä–µ–¥–∏—Ç') || name.includes('–∑–∞–π–º')) icon = 'üí≥';
      else if (name.includes('—Å–ø–æ—Ä—Ç') || name.includes('—Ñ–∏—Ç–Ω–µ—Å')) icon = 'üèãÔ∏è';
      else if (name.includes('–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è')) icon = '‚úàÔ∏è';
      else if (name.includes('—Ä–µ—Å—Ç–æ—Ä–∞–Ω') || name.includes('–∫–∞—Ñ–µ')) icon = 'üçΩÔ∏è';
      else if (name.includes('–±–µ–Ω–∑–∏–Ω') || name.includes('–ø–∞—Ä–∫–æ–≤–∫–∞')) icon = '‚õΩ';
      else if (name.includes('–∫—Ä–∞—Å–æ—Ç–∞') || name.includes('—É—Ö–æ–¥')) icon = 'üíÑ';
      else if (name.includes('–ø–æ–¥–∞—Ä–∫–∏')) icon = 'üéÅ';
      else if (name.includes('–ø—Ä–æ—á–∏–µ')) icon = 'üí∏';
      
      return {
        id: category.id,
        name: category.category_name,
        type: category.category_type,
        icon: icon,
        color: color,
        createdAt: category.createdAt,
        updatedAt: category.updatedAt
      };
    });
    
    res.json(formattedCategories);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
router.post('/', auth, async (req, res) => {
  try {
    const { name, type } = req.body;

    if (!name || !type) {
      return res.status(400).json({ message: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    if (!['income', 'expense'].includes(type)) {
      return res.status(400).json({ message: '–¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å income –∏–ª–∏ expense' });
    }

    const category = await Category.create({
      category_name: name,
      category_type: type,
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    const formattedCategory = {
      id: category.id,
      name: category.category_name,
      type: category.category_type,
      icon: 'üí∞',
      color: category.category_type === 'income' ? '#28a745' : '#dc3545',
      createdAt: category.createdAt,
      updatedAt: category.updatedAt
    };

    res.status(201).json(formattedCategory);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
router.put('/:id', auth, async (req, res) => {
  try {
    const { id } = req.params;
    const { name, type } = req.body;

    const category = await Category.findByPk(id);

    if (!category) {
      return res.status(404).json({ message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    if (type && !['income', 'expense'].includes(type)) {
      return res.status(400).json({ message: '–¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å income –∏–ª–∏ expense' });
    }

    await category.update({
      category_name: name || category.category_name,
      category_type: type || category.category_type,
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    const formattedCategory = {
      id: category.id,
      name: category.category_name,
      type: category.category_type,
      icon: 'üí∞',
      color: category.category_type === 'income' ? '#28a745' : '#dc3545',
      createdAt: category.createdAt,
      updatedAt: category.updatedAt
    };

    res.json(formattedCategory);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
router.delete('/:id', auth, async (req, res) => {
  try {
    const { id } = req.params;

    const category = await Category.findByPk(id);

    if (!category) {
      return res.status(404).json({ message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    await category.destroy();

    res.json({ message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

module.exports = router; 