const express = require('express');
const router = express.Router();
const { Category } = require('../db/models');

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∫–æ–Ω–æ–∫ –∏ —Ü–≤–µ—Ç–æ–≤
const getIconForCategory = (categoryName) => {
  const iconMap = {
    '–ó–∞—Ä–ø–ª–∞—Ç–∞': 'üí∞',
    '–ü–æ–¥–∞—Ä–∫–∏': 'üéÅ',
    '–§—Ä–∏–ª–∞–Ω—Å': 'üíº',
    '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏': 'üìà',
    '–ï–¥–∞': 'üçî',
    '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 'üöó',
    '–ñ–∏–ª—å–µ': 'üè†',
    '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 'üéÆ',
    '–û–¥–µ–∂–¥–∞': 'üëï',
    '–ó–¥–æ—Ä–æ–≤—å–µ': 'üíä',
    '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 'üìö',
    '–ü–æ–∫—É–ø–∫–∏': 'üõí'
  };
  return iconMap[categoryName] || 'üìÅ';
};

const getColorForCategory = (categoryType) => {
  return categoryType === 'income' ? '#4CAF50' : '#F44336';
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
const authenticateUser = (req, res, next) => {
  const userId = req.headers['user-id'] || 9; // –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID 9
  req.userId = userId;
  next();
};

// GET /api/categories - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
router.get('/', authenticateUser, async (req, res) => {
  try {
    const categories = await Category.findAll({
      attributes: ['id', 'category_name', 'category_type'],
      order: [['category_type', 'ASC'], ['category_name', 'ASC']]
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    const formattedCategories = categories.map(cat => ({
      id: cat.id,
      name: cat.category_name,
      type: cat.category_type,
      icon: getIconForCategory(cat.category_name),
      color: getColorForCategory(cat.category_type)
    }));

    res.json({
      success: true,
      data: formattedCategories
    });
  } catch (error) {
    console.error('Error fetching categories:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
      error: error.message
    });
  }
});

// GET /api/categories/by-type/:type - –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ç–∏–ø—É (income/expense)
router.get('/by-type/:type', authenticateUser, async (req, res) => {
  try {
    const { type } = req.params;
    
    if (!['income', 'expense'].includes(type)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ income –∏–ª–∏ expense'
      });
    }

    const categories = await Category.findAll({
      where: { category_type: type },
      attributes: ['id', 'category_name', 'category_type'],
      order: [['category_name', 'ASC']]
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    const formattedCategories = categories.map(cat => ({
      id: cat.id,
      name: cat.category_name,
      type: cat.category_type,
      icon: getIconForCategory(cat.category_name),
      color: getColorForCategory(cat.category_type)
    }));

    res.json({
      success: true,
      data: formattedCategories
    });
  } catch (error) {
    console.error('Error fetching categories by type:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
      error: error.message
    });
  }
});

module.exports = router; 