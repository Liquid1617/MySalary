const express = require('express');
const router = express.Router();
const { Account, Currency } = require('../db/models');
const authMiddleware = require('../middleware/auth');

// GET /api/accounts - –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/', authMiddleware, async (req, res) => {
  try {
    const accounts = await Account.findAll({
      where: { 
        user_id: req.user.id,
        is_active: true  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—á–µ—Ç–∞
      },
      include: [
        {
          model: Currency,
          as: 'currency',
          attributes: ['id', 'code', 'name', 'symbol']
        }
      ],
      order: [['createdAt', 'DESC']]
    });

    res.json(accounts);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// GET /api/accounts/deactivated - –ø–æ–ª—É—á–∏—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/deactivated', authMiddleware, async (req, res) => {
  try {
    const deactivatedAccounts = await Account.findAll({
      where: { 
        user_id: req.user.id,
        is_active: false  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞
      },
      include: [
        {
          model: Currency,
          as: 'currency',
          attributes: ['id', 'code', 'name', 'symbol']
        }
      ],
      order: [['updatedAt', 'DESC']]  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    });

    res.json(deactivatedAccounts);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// GET /api/accounts/:id/balance - –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—á–µ—Ç–∞
router.get('/:id/balance', authMiddleware, async (req, res) => {
  try {
    const account = await Account.findOne({
      where: { id: req.params.id, user_id: req.user.id },
      include: [
        {
          model: Currency,
          as: 'currency',
          attributes: ['id', 'code', 'name', 'symbol']
        }
      ]
    });

    if (!account) {
      return res.status(404).json({ error: '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json({ 
      balance: account.balance,
      currency: account.currency
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// POST /api/accounts - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—á–µ—Ç
router.post('/', authMiddleware, async (req, res) => {
  try {
    const { account_type, account_name, currency_id, balance, description } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!account_type || !account_name || !currency_id) {
      return res.status(400).json({ 
        error: '–ü–æ–ª—è account_type, account_name –∏ currency_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–∏–ø–∞ —Å—á–µ—Ç–∞
    const validTypes = ['cash', 'debit_card', 'credit_card', 'bank_account', 'digital_wallet'];
    if (!validTypes.includes(account_type)) {
      return res.status(400).json({ 
        error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Å—á–µ—Ç–∞' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã
    const currency = await Currency.findByPk(currency_id);
    if (!currency) {
      return res.status(400).json({ 
        error: '–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
      });
    }

    const account = await Account.create({
      user_id: req.user.id,
      account_type,
      account_name,
      currency_id,
      balance: balance || 0,
      description
    });

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å—á–µ—Ç —Å –≤–∞–ª—é—Ç–æ–π
    const createdAccount = await Account.findByPk(account.id, {
      include: [
        {
          model: Currency,
          as: 'currency',
          attributes: ['id', 'code', 'name', 'symbol']
        }
      ]
    });

    res.status(201).json(createdAccount);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// PUT /api/accounts/:id - –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç
router.put('/:id', authMiddleware, async (req, res) => {
  try {
    const { account_type, account_name, currency_id, balance, description, is_active } = req.body;

    const account = await Account.findOne({
      where: { id: req.params.id, user_id: req.user.id }
    });

    if (!account) {
      return res.status(404).json({ error: '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Å—á–µ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
    if (account_type) {
      const validTypes = ['cash', 'debit_card', 'credit_card', 'bank_account', 'digital_wallet'];
      if (!validTypes.includes(account_type)) {
        return res.status(400).json({ 
          error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Å—á–µ—Ç–∞' 
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª—é—Ç—ã –µ—Å–ª–∏ –æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞
    if (currency_id) {
      const currency = await Currency.findByPk(currency_id);
      if (!currency) {
        return res.status(400).json({ 
          error: '–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
        });
      }
    }

    await account.update({
      account_type: account_type || account.account_type,
      account_name: account_name || account.account_name,
      currency_id: currency_id || account.currency_id,
      balance: balance !== undefined ? balance : account.balance,
      description: description !== undefined ? description : account.description,
      is_active: is_active !== undefined ? is_active : account.is_active
    });

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç —Å –≤–∞–ª—é—Ç–æ–π
    const updatedAccount = await Account.findByPk(account.id, {
      include: [
        {
          model: Currency,
          as: 'currency',
          attributes: ['id', 'code', 'name', 'symbol']
        }
      ]
    });

    res.json(updatedAccount);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// DELETE /api/accounts/:id - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç (soft delete)
router.delete('/:id', authMiddleware, async (req, res) => {
  try {
    console.log('üîÑ Deactivating account:', req.params.id);
    const account = await Account.findOne({
      where: { id: req.params.id, user_id: req.user.id, is_active: true }
    });

    if (!account) {
      return res.status(404).json({ error: '–ê–∫—Ç–∏–≤–Ω—ã–π —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—á–µ—Ç –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
    await account.update({ is_active: false });
    console.log('‚úÖ Account deactivated successfully:', req.params.id);
    
    res.json({ message: '–°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—á–µ—Ç–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// DELETE /api/accounts/:id/permanently - –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å —Å—á–µ—Ç –∏ –≤—Å–µ –µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
router.delete('/:id/permanently', authMiddleware, async (req, res) => {
  try {
    console.log('üíÄ Permanently deleting account and transactions:', req.params.id);
    const account = await Account.findOne({
      where: { id: req.params.id, user_id: req.user.id }
    });

    if (!account) {
      return res.status(404).json({ error: '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞
    const { Transaction } = require('../db/models');
    const transactions = await Transaction.findAll({
      where: { account_id: req.params.id },
      include: [
        {
          model: Account,
          as: 'account',
          where: { user_id: req.user.id }
        }
      ]
    });

    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —É–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    let totalBalanceChange = 0;
    for (const transaction of transactions) {
      const balanceChange = transaction.transaction_type === 'income' ? -transaction.amount : transaction.amount;
      totalBalanceChange += parseFloat(balanceChange);
      await transaction.destroy();
    }
    console.log(`üóëÔ∏è Deleted ${transactions.length} transactions`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º (—Ö–æ—Ç—è –æ–Ω –≤—Å–µ —Ä–∞–≤–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω)
    await account.update({
      balance: parseFloat(account.balance) + totalBalanceChange
    });

    // –¢–µ–ø–µ—Ä—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —Å—á–µ—Ç
    await account.destroy();
    console.log('‚úÖ Account permanently deleted:', req.params.id);
    
    res.json({ 
      message: `–°—á–µ—Ç –∏ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã`,
      deletedTransactions: transactions.length 
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

module.exports = router; 